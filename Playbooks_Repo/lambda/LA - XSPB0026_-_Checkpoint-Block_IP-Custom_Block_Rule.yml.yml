id: Checkpoint - Block IP - Custom Block Rule
name: Checkpoint - Block IP - Custom Block Rule
description: "This playbook blocks IP addresses using Custom Block Rules in Check
  Point Firewall.\nThe playbook receives malicious IP addresses as inputs, creates
  a custom bi-directional rule to block them, and publishes the configuration."
trigger:
steps:
- id: 175f9378-f1cc-48b8-8c7e-72a87d6dbe5c
  type: start
  description: ''
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: c97b7d87-db79-4e01-8831-545456462909
  type: condition
  description: Is Check Point Firewall enabled
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  - if_: ''
    then: f4e1af90-6b1e-4436-84b2-54ed3e44be8d
    else_:
  - if_: ''
    then: dc0c9f6f-469d-42fb-84c7-81288ef8ba3e
    else_:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: f4e1af90-6b1e-4436-84b2-54ed3e44be8d
  type: title
  description: ''
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 04b33257-ce71-4520-84d8-edb86361883f
  type: condition
  description: Validate if the IP object is already in Check Point.
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  - if_: ''
    then: fc1ac496-a113-43c3-8f9e-ffb71d0d3066
    else_:
  - if_: ''
    then: 657229a0-62d9-4c72-844f-768dea837582
    else_:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: fc1ac496-a113-43c3-8f9e-ffb71d0d3066
  type: action
  description: Add host object to Check Point Firewall.
  action:
  connector:
  inputs:
    ip_address:
      complex:
        root: inputs.IP
        transformers:
        - operator: split
          args:
            delimiter:
              value:
                simple: ','
    name:
      complex:
        root: inputs.IP
        transformers:
        - operator: split
          args:
            delimiter:
              value:
                simple: ','
    session_id:
      complex:
        root: CheckPoint
        accessor: Login.session-id
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: dc0c9f6f-469d-42fb-84c7-81288ef8ba3e
  type: action
  description: Log in to Check Point to get unique session ID.
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: f00d4842-88c9-40db-8126-c2004cd7096e
  type: action
  description: Add access rule to Check Point Firewall.
  action:
  connector:
  inputs:
    destination:
      simple: XSOAR-${incident.id}
    layer:
      simple: ${inputs.rule_layer}
    name:
      simple: ${inputs.rule_name}
    position:
      simple: ${inputs.rule_position}
    session_id:
      complex:
        root: CheckPoint
        accessor: Login.session-id
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: f7944d23-cc81-4753-8c14-6c77e3ac41d6
  type: subplaybook
  description: Publish the Check Point Firewall configuration and install policy on
    all available gateways.
  action:
  connector:
  inputs:
    auto_logout:
      simple: 'False'
    checkpoint_error_handling:
      simple: ${inputs.checkpoint_error_handling}
    discard_changes:
      simple: ${inputs.discard_changes}
    install_policy:
      simple: ${inputs.install_policy}
    policy_package:
      simple: ${inputs.policy_package}
    sid:
      simple: ${CheckPoint.Login.session-id}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 14891e0f-33e6-4ba7-8faa-e8ab79c5a889
  type: condition
  description: Check if the access rule was added correctly.
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  - if_: ''
    then: d6d93fc2-b5f8-41e0-84b6-d39d51039f37
    else_:
  - if_: ''
    then: ea9ccc02-67ef-4924-8380-3e0ba3a03d6c
    else_:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 617247cb-84ae-4ef0-8834-5b8310b6607d
  type: action
  description: Get rule list from Check Point Firewall
  action:
  connector:
  inputs:
    identifier:
      simple: ${inputs.rule_layer}
    session_id:
      simple: ${CheckPoint.Login.session-id}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: ea9ccc02-67ef-4924-8380-3e0ba3a03d6c
  type: action
  description: Log ut with specific session ID from Check Point Firewall.
  action:
  connector:
  inputs:
    session_id:
      simple: ${CheckPoint.Login.session-id}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: dec826c9-0de7-4e01-87aa-7a83f14c0b64
  type: action
  description: Prints text to war room (Markdown supported).
  action: Print
  connector:
  inputs:
    value:
      simple: There was a problem adding the access rule.
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: ba25527b-75e8-4a5b-827f-0504cf07e4d0
  type: condition
  description: Validate if access rule was added.
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  - if_: ''
    then: dec826c9-0de7-4e01-87aa-7a83f14c0b64
    else_:
  - if_: ''
    then: f7944d23-cc81-4753-8c14-6c77e3ac41d6
    else_:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 2065aef3-9908-4087-848e-9d4a4af622d1
  type: condition
  description: Validate host object added successfully.
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  - if_: ''
    then: 6eb870df-6055-46f3-8162-590b10fcc4a4
    else_:
  - if_: ''
    then: e418b023-1569-4098-883d-2644e655811f
    else_:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 6eb870df-6055-46f3-8162-590b10fcc4a4
  type: action
  description: Prints text to war room (Markdown supported).
  action: Print
  connector:
  inputs:
    value:
      simple: There was a problem adding object host.
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 015dc9bf-3a9a-4399-8f7a-9987fb218556
  type: action
  description: Get host object to check if IP already exists.
  action:
  connector:
  inputs:
    filter_search:
      complex:
        root: inputs.IP
        transformers:
        - operator: split
          args:
            delimiter:
              value:
                simple: ','
    ip_only:
      simple: 'true'
    session_id:
      simple: ${CheckPoint.Login.session-id}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: d6d93fc2-b5f8-41e0-84b6-d39d51039f37
  type: action
  description: Prints text to war room (Markdown supported).
  action: Print
  connector:
  inputs:
    value:
      simple: Access rule was not added to Checkpoint successfully.
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: e418b023-1569-4098-883d-2644e655811f
  type: subplaybook
  description: Publish the Check Point Firewall configuration and install policy on
    all available gateways.
  action:
  connector:
  inputs:
    auto_logout:
      simple: 'False'
    checkpoint_error_handling:
      simple: ${inputs.checkpoint_error_handling}
    discard_changes:
      simple: ${inputs.discard_changes}
    install_policy:
      simple: ${inputs.install_policy}
    policy_package:
      simple: ${inputs.policy_package}
    sid:
      simple: ${CheckPoint.Login.session-id}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 1160b925-6034-4829-816c-9a4d57bcb229
  type: action
  description: Get host object to check if IP already exist.
  action:
  connector:
  inputs:
    filter_search:
      complex:
        root: inputs.IP
        transformers:
        - operator: split
          args:
            delimiter:
              value:
                simple: ','
    ip_only:
      simple: 'true'
    session_id:
      simple: ${CheckPoint.Login.session-id}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: fb571b4b-09de-44eb-8382-758633671f4c
  type: condition
  description: If action manual handling is enabled, the playbook will pause and wait
    for manual review.
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  - if_: ''
    then: ea9ccc02-67ef-4924-8380-3e0ba3a03d6c
    else_:
  - if_: ''
    then: b2bfee2e-854f-4f48-8e56-dfe26e9ceea7
    else_:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: b2bfee2e-854f-4f48-8e56-dfe26e9ceea7
  type: action
  description: User manually publishes on Check Point Firwall console.
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 657229a0-62d9-4c72-844f-768dea837582
  type: action
  description: Compare two lists and put the differences in context.
  action: CompareLists
  connector:
  inputs:
    left:
      complex:
        root: inputs.IP
        transformers:
        - operator: split
          args:
            delimiter:
              value:
                simple: ','
    right:
      simple: ${CheckPoint.Objects.ipv4-address}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: c856d307-d035-4a15-8e11-dcee37e6599b
  type: condition
  description: Check if there is an IP without an object in the Firewall.
  action:
  connector:
  inputs: {}
  outputs:
  conditions:
  - if_: ''
    then: 0ccc3589-1788-4672-8c04-dabe9a6b1677
    else_:
  - if_: ''
    then: 1160b925-6034-4829-816c-9a4d57bcb229
    else_:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 0ccc3589-1788-4672-8c04-dabe9a6b1677
  type: action
  description: Add host object to Check Point Firewall.
  action:
  connector:
  inputs:
    ip_address:
      simple: ${ListCompare.LeftOnly}
    name:
      simple: ${ListCompare.LeftOnly}
    session_id:
      complex:
        root: CheckPoint
        accessor: Login.session-id
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 0b63ce54-9db6-4396-8074-a3fc0437185b
  type: action
  description: Adds a group.
  action:
  connector:
  inputs:
    name:
      simple: XSOAR-${incident.id}
    session_id:
      simple: ${CheckPoint.Login.session-id}
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
- id: 5499eb78-20b2-4d48-843f-710b321fc10d
  type: action
  description: Updates the specified group object.
  action:
  connector:
  inputs:
    identifier:
      simple: XSOAR-${incident.id}
    members:
      complex:
        root: CheckPoint.Objects
        filters:
        - - operator: inList
            left:
              value:
                simple: CheckPoint.Objects.ipv4-address
              iscontext: true
            right:
              value:
                simple: inputs.IP
              iscontext: true
        accessor: name
  outputs:
  conditions:
  subplaybooks:
  parallel:
  instructions:
  timeout:
  escalation:
  runtime:
  script_content:
  task_definition:
inputs:
outputs:
metadata:
  vendor_mappings: {}
