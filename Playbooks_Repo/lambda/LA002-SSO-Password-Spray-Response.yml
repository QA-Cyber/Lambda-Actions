id: LA002-SSO-Password-Spray-Response
name: SSO Password Spray Response
description: Responds to SSO Password Spray detection through triage, investigation, and containment actions including IP blocking, user session clearing, and password expiration.

trigger:
  type: event
  event:
    source: alerts
    on: create
    filters:
      alert_type:
        - "SSO Password Spray Threat Detected"
        - "SSO Password Spray Activity Observed"
        - "SSO Password Spray Involving a Honey User"

inputs:
  - name: alert_id
    description: Unique identifier for the alert triggering the playbook.
  - name: username
    description: The username involved in the SSO activity.
  - name: source_ip
    description: IP address used in the login attempt.
  - name: user_agent
    description: User agent string from the login attempt.

steps:
  - id: check-ip-reputation
    type: action
    description: Check the reputation of the source IP involved in the alert.
    connector: threat_intel
    action: ip_reputation
    inputs:
      ip: "{{ inputs.source_ip }}"
    outputs:
      is_malicious: "{{ result.malicious }}"

  - id: get-login-events
    type: action
    description: Retrieve raw login events associated with the alert.
    connector: log_management
    action: get_alert_events
    inputs:
      alert_id: "{{ inputs.alert_id }}"
    outputs:
      login_events: "{{ result.events }}"

  - id: is-ip-malicious
    type: condition
    description: Determine if the IP has a high risk reputation.
    conditions:
      - if: "{{ steps.check-ip-reputation.outputs.is_malicious }}"
        then: block-ip
        else: investigation-start

  - id: block-ip
    type: action
    description: Block the suspicious IP address using firewall integration.
    connector: firewall
    action: block_ip
    inputs:
      ip: "{{ inputs.source_ip }}"

  - id: investigation-start
    type: task
    description: Logical grouping step for investigation phase.
    task_definition:
      type: phase
      parameters:
        label: Investigation

  - id: get-user-risk
    type: action
    description: Get the risk level of the user involved in the login.
    action: get_user_risk_score
    inputs:
      user: "{{ inputs.username }}"
    outputs:
      risk_level: "{{ result.risk_level }}"

  - id: check-user-agent
    type: script
    runtime: python
    description: Analyze the user agent string for signs of automation or tools.
    script_content: |
      def run(user_agent):
          suspicious_agents = ["curl", "wget", "sqlmap"]
          for sa in suspicious_agents:
              if sa in user_agent.lower():
                  return True
          return False
      result = run(inputs.get("user_agent"))
    inputs:
      user_agent: "{{ inputs.user_agent }}"
    outputs:
      is_suspicious_agent: "{{ result }}"

  - id: get-user-mfa-status
    type: action
    description: Retrieve the MFA status of the user.
    connector: identity_provider
    action: get_user_factors
    inputs:
      username: "{{ inputs.username }}"
    outputs:
      has_mfa: "{{ result.has_mfa }}"

  - id: analyze-timestamps
    type: script
    runtime: python
    description: Analyze time intervals between login attempts for automation patterns.
    script_content: |
      def is_automated(timestamps):
          deltas = [timestamps[i+1] - timestamps[i] for i in range(len(timestamps)-1)]
          return all(abs(d - deltas[0]) < 500 for d in deltas)
      result = is_automated(inputs.get("timestamps"))
    inputs:
      timestamps: "{{ steps.get-login-events.outputs.login_events | map(attribute='timestamp') }}"
    outputs:
      is_automated: "{{ result }}"

  - id: suspicious-user-check
    type: condition
    description: Determine if containment action is needed.
    conditions:
      - if: >
          {{
            steps.get-user-risk.outputs.risk_level == 'high' or
            steps.check-user-agent.outputs.is_suspicious_agent or
            steps.analyze-timestamps.outputs.is_automated
          }}
        then: clear-sessions
        else: exit-no-containment

  - id: clear-sessions
    type: action
    description: Clear active user sessions using identity provider integration.
    connector: identity_provider
    action: clear_user_sessions
    inputs:
      username: "{{ inputs.username }}"

  - id: expire-password
    type: condition
    description: Determine if password should be expired based on MFA status.
    conditions:
      - if: "{{ not steps.get-user-mfa-status.outputs.has_mfa }}"
        then: expire-password-now

  - id: expire-password-now
    type: action
    description: Expire the password for the user.
    connector: identity_provider
    action: expire_password
    inputs:
      username: "{{ inputs.username }}"

  - id: close-alert
    type: action
    description: Close the alert once containment is completed.
    action: close_alert
    inputs:
      alert_id: "{{ inputs.alert_id }}"

  - id: exit-no-containment
    type: action
    description: Exit the playbook without containment.
    action: log
    inputs:
      message: "No suspicious activity confirmed. No containment required."

outputs:
  - name: containment_status
    description: Whether any containment actions were performed.
    value: "{{ steps.clear-sessions.executed or steps.expire-password-now.executed }}"
